services:
  mysql:
    image: mysql:8.4
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} --silent" ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      sh -lc 'exec redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}'
    volumes: [redis-data:/data]
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ${REDIS_PASSWORD:+-a ${REDIS_PASSWORD}} ping | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis_ai:
    image: redis:7-alpine
    container_name: redis_ai
    command: redis-server --port 6379
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ${REDIS_PASSWORD:+-a ${REDIS_PASSWORD}} ping | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: always

  backend:
    build: { context: ./pocketc_backend, dockerfile: Dockerfile }
    image: app:latest
    depends_on:
      mysql: { condition: service_healthy }
      redis: { condition: service_healthy }
      ai: { condition: service_healthy }
    expose: ["8080"]
    environment:
      SERVER_PORT: 8080
      TZ: Asia/Seoul
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      MYSQL_DB: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      AI_BASE_URL: http://ai:8080
    restart: unless-stopped

  ai:
    build: { context: ./pocketc_ai, dockerfile: Dockerfile }
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    env_file: .env
    depends_on:
      mysql: { condition: service_healthy }
      redis_ai: { condition: service_healthy }
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      DB_HOST: mysql
      DB_PORT: ${DB_PORT}
      MYSQL_DB: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    expose: ["8000"]

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    depends_on: [backend, mysql, redis, ai]
    ports: ["80:80", "443:443", "3306:3306", "6379:6379"]
    volumes:
      - ./pocketc_backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    user: root
    environment:
      JENKINS_OPTS: --prefix=/jenkins
    volumes:
      - /opt/pocketc:/opt/pocketc:ro
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /usr/libexec/docker/cli-plugins/docker-compose:/usr/libexec/docker/cli-plugins/docker-compose:ro

  worker:
    build: ./pocketc_ai/
    command: celery -A app.celery_app.celery worker -l info --concurrency=4
    env_file: .env
    depends_on: [redis_ai, mysql]

  beat:
    build: ./pocketc_ai/
    command: celery -A app.celery_app.celery beat -l info
    env_file: .env
    depends_on: [redis_ai, mysql]

  flower:
    build: ./pocketc_ai/
    command: celery -A app.celery_app.celery flower --port=5555
    env_file: .env
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    ports:
      - "5555:5555"
    depends_on: [redis_ai]

volumes:
  mysql-data:
  redis-data:
  jenkins_home:
    external: true
