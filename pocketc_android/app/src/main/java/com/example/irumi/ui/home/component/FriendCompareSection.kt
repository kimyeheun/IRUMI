package com.example.irumi.ui.home.component

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.irumi.ui.theme.BrandGreen
import kotlin.math.abs
import kotlin.math.max
import kotlin.math.min

@Composable
fun FriendCompareSection(
    myScore: Int?,                 // ÎÇ¥ Ï†êÏàò (ÏÑúÎ≤ÑÏóêÏÑú ÏïÑÏßÅ Ïïà ÏôîÏúºÎ©¥ null)
    friendScore: Int?,             // ÏπúÍµ¨ Ï†êÏàò (ÎØ∏Ï†úÍ≥µ/Î°úÎî© Ïãú null)
    friendName: String,
    titleColor: Color = BrandGreen,
    modifier: Modifier = Modifier
) {
    val onSurfaceVariant = MaterialTheme.colorScheme.onSurfaceVariant
    val positive = Color(0xFF16A34A) // Î∏åÎûúÎìú Í∑∏Î¶∞ ÌÜ§
    val negative = Color(0xFFEF4444) // Î†àÎìú ÌÜ§
    val bgNeutral = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = .35f)

    val my = myScore?.coerceIn(0, 100)
    val friend = friendScore?.coerceIn(0, 100)

    val summary = when {
        my != null && friend != null -> {
            val diff = my - friend
            when {
                diff > 0  -> "ÎÇ¥Í∞Ä ${diff}Ï†ê ÏïûÏÑúÏöî üîº"
                diff < 0  -> "$friendName Ïù¥(Í∞Ä) ${abs(diff)}Ï†ê ÏïûÏÑúÏöî üîΩ"
                else      -> "ÎèôÏ†êÏù¥ÏóêÏöî ü§ù"
            }
        }
        my != null && friend == null -> "ÏπúÍµ¨ Ï†êÏàòÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë‚Ä¶"
        else                         -> "Ï†êÏàò Î∂àÎü¨Ïò§Îäî Ï§ë‚Ä¶"
    }

    Column(
        modifier = modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(MaterialTheme.colorScheme.surface)
            .padding(16.dp)
    ) {
        Text(
            text = "$friendName ÏôÄÏùò ÎπÑÍµê",
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = titleColor
        )
        Spacer(Modifier.height(12.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            ScorePill(
                label = "ÎÇò",
                score = my,
                bg = positive.copy(alpha = .10f),
                fg = positive
            )
            ScorePill(
                label = friendName,
                score = friend,
                bg = if (friend == null) bgNeutral else negative.copy(alpha = .10f),
                fg = if (friend == null) onSurfaceVariant else negative
            )
        }

        Spacer(Modifier.height(10.dp))
        Text(summary, fontSize = 12.sp, color = onSurfaceVariant)
        Spacer(Modifier.height(8.dp))

        if (my != null && friend != null) {
            MiniBarCompare(my, friend, myColor = positive, friendColor = negative)
        }
    }
}

@Composable
private fun ScorePill(
    label: String,
    score: Int?,        // null ‚Üí ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
    bg: Color,
    fg: Color
) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Text(label, fontWeight = FontWeight.SemiBold)
        Spacer(Modifier.height(6.dp))
        Box(
            modifier = Modifier
                .clip(RoundedCornerShape(10.dp))
                .background(bg)
                .padding(horizontal = 14.dp, vertical = 8.dp)
        ) {
            if (score == null) {
                // Î°úÎî©/ÎØ∏Ï†úÍ≥µ ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
                Box(
                    Modifier
                        .width(44.dp)
                        .height(20.dp)
                        .alpha(0.35f)
                        .clip(RoundedCornerShape(6.dp))
                        .background(Color(0xFFE5E7EB))
                )
            } else {
                Text("${score}Ï†ê", color = fg, fontSize = 18.sp, fontWeight = FontWeight.Bold)
            }
        }
    }
}

@Composable
private fun MiniBarCompare(
    my: Int,
    friend: Int,
    myColor: Color,
    friendColor: Color
) {
    val total = max(1, my + friend)
    val myWeight = my.toFloat() / total
    val friendWeight = friend.toFloat() / total

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(8.dp)
            .clip(RoundedCornerShape(999.dp))
            .background(Color(0xFFF1F5F9))
    ) {
        Box(
            modifier = Modifier
                .fillMaxHeight()
                .weight(max(0.05f, min(0.95f, myWeight)))
                .background(myColor)
        )
        Box(
            modifier = Modifier
                .fillMaxHeight()
                .weight(max(0.05f, min(0.95f, friendWeight)))
                .background(friendColor)
        )
    }
}
