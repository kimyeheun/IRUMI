pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); buildDiscarder(logRotator(numToKeepStr: '20')) }

  environment {
    WORKDIR  = 'pocketc_backend'
    GRADLE_USER_HOME = '/var/jenkins_home/.gradle'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Unit & Integration Tests') {
      steps {
        dir(env.WORKDIR) {
          sh 'chmod +x gradlew || true'
          withCredentials([
            string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET')
          ]) {
            sh '''
              set -eu
              export SPRING_PROFILES_ACTIVE=test
              ./gradlew --no-daemon clean test
            '''
          }
        }
      }
    }

    stage('Build (Gradle)') {
      steps {
        dir(env.WORKDIR) {
          sh 'set -eu; ./gradlew --no-daemon bootJar'
        }
      }
    }

    stage('Deploy (Docker Compose)') {
      steps {
        dir(env.WORKDIR) {
          withCredentials([
            string(credentialsId: 'MYSQL_ROOT_PASSWORD', variable: 'MYSQL_ROOT_PASSWORD'),
            string(credentialsId: 'MYSQL_PASSWORD', variable: 'MYSQL_PASSWORD'),
            string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD'),
            string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET')
          ]) {
            sh '''
              set -eu

              echo "[BEFORE] app:latest  ->" $(docker image inspect app:latest --format '{{.Id}} {{.Created}}' || echo "none")
              echo "[BEFORE] backend uses" $(docker inspect backend --format '{{.Image}}' || echo "none")

              GIT_SHA=$(git rev-parse --short=12 HEAD)
              BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

              docker compose down backend

              DB_HOST=mysql DB_PORT=3306 MYSQL_DB=pocketcdb MYSQL_USER=hamster \
              MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" MYSQL_PASSWORD="$MYSQL_PASSWORD" \
              REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD="$REDIS_PASSWORD" \
              SERVER_PORT=8080 TZ=Asia/Seoul \
              JWT_SECRET="$JWT_SECRET" \
              BUILD_REVISION="$GIT_SHA" BUILD_TIME="$BUILD_TIME" \
              docker compose build --pull \
              --build-arg BUILD_REVISION="$GIT_SHA" \
              --build-arg BUILD_TIME="$BUILD_TIME" \
              backend

              DB_HOST=mysql DB_PORT=3306 MYSQL_DB=pocketcdb MYSQL_USER=hamster \
              MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" MYSQL_PASSWORD="$MYSQL_PASSWORD" \
              REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD="$REDIS_PASSWORD" \
              SERVER_PORT=8080 TZ=Asia/Seoul \
              JWT_SECRET="$JWT_SECRET" \
              BUILD_REVISION="$GIT_SHA" BUILD_TIME="$BUILD_TIME" \
              docker compose up -d --no-deps --force-recreate backend

              echo "[AFTER ] app:latest  ->" $(docker image inspect app:latest --format '{{.Id}} {{.Created}}')
              echo "[AFTER ] backend uses" $(docker inspect backend --format '{{.Image}}')

              docker compose ps
            '''
          }
        }
      }
    }

    stage('Smoke test') {
      when { branch 'backend' }
      steps {
        sh 'curl -fsS http://nginx/actuator/health | grep \'"status":"UP"\''
        echo '[OK] smoke test passed'
      }
    }
  }

  post {
    success { echo '✅ Deploy OK' }
    failure {
      echo '❌ Deploy Failed'
      dir(env.WORKDIR) {
        sh 'docker compose logs --no-color --tail=200 || true'
      }
      sh 'docker logs --tail=200 backend || true'
      sh 'docker logs --tail=100 nginx || true'
    }
  }
}
