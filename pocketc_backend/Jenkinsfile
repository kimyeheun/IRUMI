pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); buildDiscarder(logRotator(numToKeepStr: '20')) }

  environment {
    WORKDIR  = 'pocketc_backend'
    GRADLE_USER_HOME = '/var/jenkins_home/.gradle'
    MYSQL_USER = credentials('MYSQL_USER')
    MYSQL_ROOT_PASSWORD = credentials('MYSQL_ROOT_PASSWORD')
    MYSQL_PASSWORD = credentials('MYSQL_PASSWORD')
    REDIS_PASSWORD = credentials('REDIS_PASSWORD')
    AWS_BUCKET_NAME = credentials('AWS_BUCKET_NAME')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    JWT_SECRET = credentials('JWT_SECRET')
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Unit & Integration Tests') {
      steps {
        dir(env.WORKDIR) {
          sh 'chmod +x gradlew || true'
          sh '''
            set -eu
            export SPRING_PROFILES_ACTIVE=test
            ./gradlew --no-daemon clean test
          '''
        }
      }
    }

    stage('Build (Gradle)') {
      steps {
        dir(env.WORKDIR) {
          sh 'set -eu; ./gradlew --no-daemon bootJar'
        }
      }
    }

    stage('Prepare env for deploy (root)') {
      steps {
        // ★ 루트에 .env.ci 생성
        sh '''
          set -eu
          cat > "$WORKSPACE/.env.ci" <<EOF
MYSQL_USER=${MYSQL_USER}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
MYSQL_PASSWORD=${MYSQL_PASSWORD}
REDIS_PASSWORD=${REDIS_PASSWORD}
AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
JWT_SECRET=${JWT_SECRET}
BUILD_REVISION=$(git rev-parse --short=12 HEAD)
BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
EOF
        '''
      }
    }

    stage('Deploy (Docker Compose)') {
      steps {
        dir(env.WORKDIR) {
          sh '''
            set -eu
            docker compose -f "$WORKSPACE/compose.yaml" \
                           --project-directory "$WORKSPACE" \
                           --env-file "$WORKSPACE/.env.ci" \
                           -p s13p21a407 config | sed -n '1,120p'

            docker compose -f "$WORKSPACE/compose.yaml" \
                           --project-directory "$WORKSPACE" \
                           --env-file "$WORKSPACE/.env.ci" \
                           -p s13p21a407 build --pull backend

            docker compose -f "$WORKSPACE/compose.yaml" \
                           --project-directory "$WORKSPACE" \
                           --env-file "$WORKSPACE/.env.ci" \
                           -p s13p21a407 up -d --no-deps --force-recreate backend
          '''
        }
      }
    }

    stage('Smoke test') {
      when { branch 'backend' }
      steps {
        sh 'curl -fsS http://nginx/actuator/health | grep \'"status":"UP"\''
        echo '[OK] smoke test passed'
      }
    }
  }

  post {
    success { echo '✅ Deploy OK' }
    failure {
      echo '❌ Deploy Failed'
      dir(env.WORKDIR) {
        sh 'docker compose logs --no-color --tail=200 || true'
      }
      sh 'docker logs --tail=200 backend || true'
      sh 'docker logs --tail=100 nginx || true'
    }
  }
}
