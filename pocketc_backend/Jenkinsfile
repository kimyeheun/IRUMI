pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); buildDiscarder(logRotator(numToKeepStr: '20')) }

  environment {
    WORKDIR  = 'pocketc_backend'
    GRADLE_USER_HOME = '/var/jenkins_home/.gradle'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    // ✅ Prepare .env 단계 제거: 더 이상 .env를 만들지 않음

    stage('Unit & Integration Tests') {
      steps {
        dir(env.WORKDIR) {
          // Secret file을 바로 로드해서 환경변수로 export
          withCredentials([file(credentialsId: 'ENV', variable: 'ENV_FILE')]) {
            sh '''
              set -eu
              chmod +x ./gradlew || true

              # Secret file(.env 포맷)을 현재 셸 환경변수로 로드
              set -a
              . "$ENV_FILE"
              set +a

              # 필요한 Datasource 변수 보강(없으면 기본값 주입)
              : "${SPRING_DATASOURCE_URL:=jdbc:mysql://$DB_HOST:${DB_PORT:-3306}/$MYSQL_DB?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true}"
              : "${SPRING_DATASOURCE_USERNAME:=${MYSQL_USER}}"
              : "${SPRING_DATASOURCE_PASSWORD:=${MYSQL_PASSWORD}}"
              export SPRING_DATASOURCE_URL SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD

              ./gradlew --no-daemon test --stacktrace --info | tee gradle-test.log
            '''
          }
          junit allowEmptyResults: true, testResults: 'build/test-results/test/*.xml'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'gradle-test.log,build/reports/tests/test/**/*'
        }
      }
    }

    stage('Build (Gradle)') {
      steps {
        dir(env.WORKDIR) {
          sh 'set -eu; ./gradlew --no-daemon bootJar'
        }
      }
    }

    stage('Deploy (Docker Compose)') {
      when { branch 'backend' }
      steps {
        dir(env.WORKDIR) {
          // compose에 --env-file로 Secret file 직접 주입
          withCredentials([file(credentialsId: 'ENV', variable: 'ENV_FILE')]) {
            sh '''
              set -e
              docker compose --env-file "$ENV_FILE" down || true
              docker compose --env-file "$ENV_FILE" up -d --build
              docker ps
            '''
          }
        }
      }
    }

    stage('Smoke test') {
      when { branch 'backend' }
      steps {
        sh '''
          set -e
          if curl -fsS http://nginx/nginx-health >/dev/null 2>&1; then
            curl -fsS http://nginx/actuator/health | grep '"status":"UP"'
            echo '[OK] smoke test via service name'
          else
            curl -fsS http://54.180.163.108/actuator/health | grep '"status":"UP"'
            echo '[OK] smoke test via public IP'
          fi
        '''
      }
    }
  }

  post {
    success { echo '✅ Deploy OK' }
    failure {
      echo '❌ Deploy Failed'
      dir(env.WORKDIR) {
        sh 'docker compose logs --no-color --tail=200 || true'
      }
      sh 'docker logs --tail=200 backend || true'
      sh 'docker logs --tail=100 nginx || true'
    }
  }
}
