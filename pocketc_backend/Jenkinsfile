pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); buildDiscarder(logRotator(numToKeepStr: '20')) }

  environment {
    WORKDIR  = 'pocketc_backend'
    GRADLE_USER_HOME = '/var/jenkins_home/.gradle'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Unit & Integration Tests') {
      steps {
        dir(env.WORKDIR) {
          sh '''
            set -eu
            chmod +x ./gradlew || true
            ./gradlew --no-daemon test
          '''
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Build (Gradle)') {
      steps {
        dir(env.WORKDIR) {
          sh 'set -eu; ./gradlew --no-daemon bootJar'
        }
      }
    }

    stage('Deploy (Docker Compose)') {
      when { branch 'backend' }
      steps {
        dir(env.WORKDIR) {
          withCredentials([
            string(credentialsId: 'MYSQL_ROOT_PASSWORD', variable: 'MYSQL_ROOT_PASSWORD'),
            string(credentialsId: 'MYSQL_PASSWORD', variable: 'MYSQL_PASSWORD'),
            string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD')
          ]) {
            sh '''
              set -eu

              echo "[BEFORE] app:latest  ->" $(docker image inspect app:latest --format '{{.Id}} {{.Created}}' || echo "none")
              echo "[BEFORE] backend uses" $(docker inspect backend --format '{{.Image}}' || echo "none")


              # runtime env (compose 변수치환용)
              export DB_HOST=mysql
              export DB_PORT=3306
              export MYSQL_DB=pocketcdb
              export MYSQL_USER=hamster
              export MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD"
              export MYSQL_PASSWORD="$MYSQL_PASSWORD"
              export REDIS_HOST=redis
              export REDIS_PORT=6379
              export REDIS_PASSWORD="$REDIS_PASSWORD"
              export SERVER_PORT=8080
              export TZ=Asia/Seoul


              # (선택) 항상 새 이미지 레이어 확보용 ARG
              GIT_SHA=$(git rev-parse --short=12 HEAD)
              BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

              docker compose build --pull \
                --build-arg BUILD_REVISION="$GIT_SHA" \
                --build-arg BUILD_TIME="$BUILD_TIME" \
                backend

              docker compose up -d --no-deps --force-recreate backend

              echo "[AFTER ] app:latest  ->" $(docker image inspect app:latest --format '{{.Id}} {{.Created}}')
              echo "[AFTER ] backend uses" $(docker inspect backend --format '{{.Image}}')

              docker compose ps
            '''
          }
        }
      }
    }

    stage('Smoke test') {
      when { branch 'backend' }
      steps {
        sh 'curl -fsS http://nginx/actuator/health | grep \'"status":"UP"\''
        echo '[OK] smoke test passed'
      }
    }
  }

  post {
    success { echo '✅ Deploy OK' }
    failure {
      echo '❌ Deploy Failed'
      dir(env.WORKDIR) {
        sh 'docker compose logs --no-color --tail=200 || true'
      }
      sh 'docker logs --tail=200 backend || true'
      sh 'docker logs --tail=100 nginx || true'
    }
  }
}
